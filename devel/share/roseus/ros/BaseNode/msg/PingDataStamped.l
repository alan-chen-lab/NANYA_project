;; Auto-generated. Do not edit!


(when (boundp 'BaseNode::PingDataStamped)
  (if (not (find-package "BASENODE"))
    (make-package "BASENODE"))
  (shadow 'PingDataStamped (find-package "BASENODE")))
(unless (find-package "BASENODE::PINGDATASTAMPED")
  (make-package "BASENODE::PINGDATASTAMPED"))

(in-package "ROS")
;;//! \htmlinclude PingDataStamped.msg.html
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass BaseNode::PingDataStamped
  :super ros::object
  :slots (_header _ping_data ))

(defmethod BaseNode::PingDataStamped
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:ping_data __ping_data) (instance BaseNode::PingData :init))
    )
   (send-super :init)
   (setq _header __header)
   (setq _ping_data __ping_data)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:ping_data
   (&rest __ping_data)
   (if (keywordp (car __ping_data))
       (send* _ping_data __ping_data)
     (progn
       (if __ping_data (setq _ping_data (car __ping_data)))
       _ping_data)))
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; BaseNode/PingData _ping_data
    (send _ping_data :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; BaseNode/PingData _ping_data
       (send _ping_data :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; BaseNode/PingData _ping_data
     (send _ping_data :deserialize buf ptr-) (incf ptr- (send _ping_data :serialization-length))
   ;;
   self)
  )

(setf (get BaseNode::PingDataStamped :md5sum-) "6c09e3f811346ddffeb07e7c62e21256")
(setf (get BaseNode::PingDataStamped :datatype-) "BaseNode/PingDataStamped")
(setf (get BaseNode::PingDataStamped :definition-)
      "Header header
PingData ping_data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: BaseNode/PingData
string pingSN
string firmwareVer
string deviceID
int32 day_
int32 hour_
int32 min_

")



(provide :BaseNode/PingDataStamped "6c09e3f811346ddffeb07e7c62e21256")


