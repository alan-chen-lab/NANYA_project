// Generated by gencpp from file BaseNode/FlagReport.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_FLAGREPORT_H
#define BASENODE_MESSAGE_FLAGREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct FlagReport_
{
  typedef FlagReport_<ContainerAllocator> Type;

  FlagReport_()
    : stop(false)
    , walking_front(false)
    , walking_back(false)
    , rotating_left(false)
    , rotating_right(false)
    , wheel_control_mode_1(false)
    , wheel_control_mode_2(false)
    , wheel_control_mode_3(false)
    , wheel_brake_mode(false)
    , wheel_release_mode(false)
    , go_to_dock(false)
    , dock_escape(false)
    , do_not_charge(false)
    , charging(false)
    , charge_finish(false)
    , fault_in_charge(false)
    , stop_btn_hit(false)
    , sleep_btn_hit(false)  {
    }
  FlagReport_(const ContainerAllocator& _alloc)
    : stop(false)
    , walking_front(false)
    , walking_back(false)
    , rotating_left(false)
    , rotating_right(false)
    , wheel_control_mode_1(false)
    , wheel_control_mode_2(false)
    , wheel_control_mode_3(false)
    , wheel_brake_mode(false)
    , wheel_release_mode(false)
    , go_to_dock(false)
    , dock_escape(false)
    , do_not_charge(false)
    , charging(false)
    , charge_finish(false)
    , fault_in_charge(false)
    , stop_btn_hit(false)
    , sleep_btn_hit(false)  {
  (void)_alloc;
    }



   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef uint8_t _walking_front_type;
  _walking_front_type walking_front;

   typedef uint8_t _walking_back_type;
  _walking_back_type walking_back;

   typedef uint8_t _rotating_left_type;
  _rotating_left_type rotating_left;

   typedef uint8_t _rotating_right_type;
  _rotating_right_type rotating_right;

   typedef uint8_t _wheel_control_mode_1_type;
  _wheel_control_mode_1_type wheel_control_mode_1;

   typedef uint8_t _wheel_control_mode_2_type;
  _wheel_control_mode_2_type wheel_control_mode_2;

   typedef uint8_t _wheel_control_mode_3_type;
  _wheel_control_mode_3_type wheel_control_mode_3;

   typedef uint8_t _wheel_brake_mode_type;
  _wheel_brake_mode_type wheel_brake_mode;

   typedef uint8_t _wheel_release_mode_type;
  _wheel_release_mode_type wheel_release_mode;

   typedef uint8_t _go_to_dock_type;
  _go_to_dock_type go_to_dock;

   typedef uint8_t _dock_escape_type;
  _dock_escape_type dock_escape;

   typedef uint8_t _do_not_charge_type;
  _do_not_charge_type do_not_charge;

   typedef uint8_t _charging_type;
  _charging_type charging;

   typedef uint8_t _charge_finish_type;
  _charge_finish_type charge_finish;

   typedef uint8_t _fault_in_charge_type;
  _fault_in_charge_type fault_in_charge;

   typedef uint8_t _stop_btn_hit_type;
  _stop_btn_hit_type stop_btn_hit;

   typedef uint8_t _sleep_btn_hit_type;
  _sleep_btn_hit_type sleep_btn_hit;





  typedef boost::shared_ptr< ::BaseNode::FlagReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::FlagReport_<ContainerAllocator> const> ConstPtr;

}; // struct FlagReport_

typedef ::BaseNode::FlagReport_<std::allocator<void> > FlagReport;

typedef boost::shared_ptr< ::BaseNode::FlagReport > FlagReportPtr;
typedef boost::shared_ptr< ::BaseNode::FlagReport const> FlagReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::FlagReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::FlagReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::FlagReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::FlagReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::FlagReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::FlagReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::FlagReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::FlagReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::FlagReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d345398ab2289d85ecccc71f9593ce9e";
  }

  static const char* value(const ::BaseNode::FlagReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd345398ab2289d85ULL;
  static const uint64_t static_value2 = 0xecccc71f9593ce9eULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::FlagReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/FlagReport";
  }

  static const char* value(const ::BaseNode::FlagReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::FlagReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Move Direction\n\
bool stop\n\
bool walking_front\n\
bool walking_back\n\
bool rotating_left\n\
bool rotating_right\n\
\n\
# Robot Mode Flag\n\
bool wheel_control_mode_1\n\
bool wheel_control_mode_2\n\
bool wheel_control_mode_3\n\
bool wheel_brake_mode\n\
bool wheel_release_mode\n\
bool go_to_dock\n\
bool dock_escape\n\
\n\
# charge\n\
bool do_not_charge\n\
bool charging\n\
bool charge_finish\n\
bool fault_in_charge\n\
\n\
# Button\n\
bool stop_btn_hit\n\
bool sleep_btn_hit\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::BaseNode::FlagReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::FlagReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stop);
      stream.next(m.walking_front);
      stream.next(m.walking_back);
      stream.next(m.rotating_left);
      stream.next(m.rotating_right);
      stream.next(m.wheel_control_mode_1);
      stream.next(m.wheel_control_mode_2);
      stream.next(m.wheel_control_mode_3);
      stream.next(m.wheel_brake_mode);
      stream.next(m.wheel_release_mode);
      stream.next(m.go_to_dock);
      stream.next(m.dock_escape);
      stream.next(m.do_not_charge);
      stream.next(m.charging);
      stream.next(m.charge_finish);
      stream.next(m.fault_in_charge);
      stream.next(m.stop_btn_hit);
      stream.next(m.sleep_btn_hit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlagReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::FlagReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::FlagReport_<ContainerAllocator>& v)
  {
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "walking_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walking_front);
    s << indent << "walking_back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walking_back);
    s << indent << "rotating_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotating_left);
    s << indent << "rotating_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotating_right);
    s << indent << "wheel_control_mode_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_control_mode_1);
    s << indent << "wheel_control_mode_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_control_mode_2);
    s << indent << "wheel_control_mode_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_control_mode_3);
    s << indent << "wheel_brake_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_brake_mode);
    s << indent << "wheel_release_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_release_mode);
    s << indent << "go_to_dock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.go_to_dock);
    s << indent << "dock_escape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_escape);
    s << indent << "do_not_charge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.do_not_charge);
    s << indent << "charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charging);
    s << indent << "charge_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_finish);
    s << indent << "fault_in_charge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault_in_charge);
    s << indent << "stop_btn_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_btn_hit);
    s << indent << "sleep_btn_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sleep_btn_hit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_FLAGREPORT_H
