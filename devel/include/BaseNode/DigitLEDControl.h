// Generated by gencpp from file BaseNode/DigitLEDControl.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_DIGITLEDCONTROL_H
#define BASENODE_MESSAGE_DIGITLEDCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct DigitLEDControl_
{
  typedef DigitLEDControl_<ContainerAllocator> Type;

  DigitLEDControl_()
    : left_dig_led(false)
    , right_dig_led(false)
    , left_run_time(0.0)
    , right_run_time(0.0)  {
    }
  DigitLEDControl_(const ContainerAllocator& _alloc)
    : left_dig_led(false)
    , right_dig_led(false)
    , left_run_time(0.0)
    , right_run_time(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _left_dig_led_type;
  _left_dig_led_type left_dig_led;

   typedef uint8_t _right_dig_led_type;
  _right_dig_led_type right_dig_led;

   typedef float _left_run_time_type;
  _left_run_time_type left_run_time;

   typedef float _right_run_time_type;
  _right_run_time_type right_run_time;





  typedef boost::shared_ptr< ::BaseNode::DigitLEDControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::DigitLEDControl_<ContainerAllocator> const> ConstPtr;

}; // struct DigitLEDControl_

typedef ::BaseNode::DigitLEDControl_<std::allocator<void> > DigitLEDControl;

typedef boost::shared_ptr< ::BaseNode::DigitLEDControl > DigitLEDControlPtr;
typedef boost::shared_ptr< ::BaseNode::DigitLEDControl const> DigitLEDControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::DigitLEDControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::DigitLEDControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::DigitLEDControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::DigitLEDControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::DigitLEDControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fcb3983ee7f931b51ef2d1803e3ef6a";
  }

  static const char* value(const ::BaseNode::DigitLEDControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fcb3983ee7f931bULL;
  static const uint64_t static_value2 = 0x51ef2d1803e3ef6aULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/DigitLEDControl";
  }

  static const char* value(const ::BaseNode::DigitLEDControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool left_dig_led\n\
bool right_dig_led\n\
float32 left_run_time\n\
float32 right_run_time\n\
";
  }

  static const char* value(const ::BaseNode::DigitLEDControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_dig_led);
      stream.next(m.right_dig_led);
      stream.next(m.left_run_time);
      stream.next(m.right_run_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DigitLEDControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::DigitLEDControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::DigitLEDControl_<ContainerAllocator>& v)
  {
    s << indent << "left_dig_led: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_dig_led);
    s << indent << "right_dig_led: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_dig_led);
    s << indent << "left_run_time: ";
    Printer<float>::stream(s, indent + "  ", v.left_run_time);
    s << indent << "right_run_time: ";
    Printer<float>::stream(s, indent + "  ", v.right_run_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_DIGITLEDCONTROL_H
