// Generated by gencpp from file BaseNode/CurrentController.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_CURRENTCONTROLLER_H
#define BASENODE_MESSAGE_CURRENTCONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct CurrentController_
{
  typedef CurrentController_<ContainerAllocator> Type;

  CurrentController_()
    : current_controller()
    , current_action()
    , current_controller_priority(0)
    , current_action_priority(0)  {
    }
  CurrentController_(const ContainerAllocator& _alloc)
    : current_controller(_alloc)
    , current_action(_alloc)
    , current_controller_priority(0)
    , current_action_priority(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_controller_type;
  _current_controller_type current_controller;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_action_type;
  _current_action_type current_action;

   typedef uint64_t _current_controller_priority_type;
  _current_controller_priority_type current_controller_priority;

   typedef uint64_t _current_action_priority_type;
  _current_action_priority_type current_action_priority;





  typedef boost::shared_ptr< ::BaseNode::CurrentController_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::CurrentController_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentController_

typedef ::BaseNode::CurrentController_<std::allocator<void> > CurrentController;

typedef boost::shared_ptr< ::BaseNode::CurrentController > CurrentControllerPtr;
typedef boost::shared_ptr< ::BaseNode::CurrentController const> CurrentControllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::CurrentController_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::CurrentController_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::CurrentController_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::CurrentController_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::CurrentController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::CurrentController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::CurrentController_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::CurrentController_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::CurrentController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddc6babeedae6888528de73484291c2d";
  }

  static const char* value(const ::BaseNode::CurrentController_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddc6babeedae6888ULL;
  static const uint64_t static_value2 = 0x528de73484291c2dULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::CurrentController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/CurrentController";
  }

  static const char* value(const ::BaseNode::CurrentController_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::CurrentController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string current_controller\n\
string current_action\n\
uint64 current_controller_priority\n\
uint64 current_action_priority\n\
";
  }

  static const char* value(const ::BaseNode::CurrentController_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::CurrentController_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_controller);
      stream.next(m.current_action);
      stream.next(m.current_controller_priority);
      stream.next(m.current_action_priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentController_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::CurrentController_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::CurrentController_<ContainerAllocator>& v)
  {
    s << indent << "current_controller: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_controller);
    s << indent << "current_action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_action);
    s << indent << "current_controller_priority: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.current_controller_priority);
    s << indent << "current_action_priority: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.current_action_priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_CURRENTCONTROLLER_H
