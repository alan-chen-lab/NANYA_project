// Generated by gencpp from file BaseNode/IrDockReport.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_IRDOCKREPORT_H
#define BASENODE_MESSAGE_IRDOCKREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct IrDockReport_
{
  typedef IrDockReport_<ContainerAllocator> Type;

  IrDockReport_()
    : ir_left()
    , ir_right()
    , ir_left_stat(0)
    , ir_right_stat(0)  {
    }
  IrDockReport_(const ContainerAllocator& _alloc)
    : ir_left(_alloc)
    , ir_right(_alloc)
    , ir_left_stat(0)
    , ir_right_stat(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ir_left_type;
  _ir_left_type ir_left;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ir_right_type;
  _ir_right_type ir_right;

   typedef int32_t _ir_left_stat_type;
  _ir_left_stat_type ir_left_stat;

   typedef int32_t _ir_right_stat_type;
  _ir_right_stat_type ir_right_stat;





  typedef boost::shared_ptr< ::BaseNode::IrDockReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::IrDockReport_<ContainerAllocator> const> ConstPtr;

}; // struct IrDockReport_

typedef ::BaseNode::IrDockReport_<std::allocator<void> > IrDockReport;

typedef boost::shared_ptr< ::BaseNode::IrDockReport > IrDockReportPtr;
typedef boost::shared_ptr< ::BaseNode::IrDockReport const> IrDockReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::IrDockReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::IrDockReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::IrDockReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::IrDockReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::IrDockReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::IrDockReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::IrDockReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::IrDockReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::IrDockReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "466bf0cbbf6c657c56a3177353abfb08";
  }

  static const char* value(const ::BaseNode::IrDockReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x466bf0cbbf6c657cULL;
  static const uint64_t static_value2 = 0x56a3177353abfb08ULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::IrDockReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/IrDockReport";
  }

  static const char* value(const ::BaseNode::IrDockReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::IrDockReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ir_left\n\
string ir_right\n\
int32 ir_left_stat\n\
int32 ir_right_stat\n\
";
  }

  static const char* value(const ::BaseNode::IrDockReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::IrDockReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ir_left);
      stream.next(m.ir_right);
      stream.next(m.ir_left_stat);
      stream.next(m.ir_right_stat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IrDockReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::IrDockReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::IrDockReport_<ContainerAllocator>& v)
  {
    s << indent << "ir_left: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ir_left);
    s << indent << "ir_right: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ir_right);
    s << indent << "ir_left_stat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ir_left_stat);
    s << indent << "ir_right_stat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ir_right_stat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_IRDOCKREPORT_H
