// Generated by gencpp from file BaseNode/PIC32EmergencySetting.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_PIC32EMERGENCYSETTING_H
#define BASENODE_MESSAGE_PIC32EMERGENCYSETTING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct PIC32EmergencySetting_
{
  typedef PIC32EmergencySetting_<ContainerAllocator> Type;

  PIC32EmergencySetting_()
    : ultrasonic_brake_enabled(false)
    , emergency_button_enabled(false)
    , bumper_brake_enabled(false)
    , auto_dock_enabled(false)
    , wheel_release_enabled(false)
    , wheel_brake_enabled(false)
    , ir_enabled(false)
    , sonic_distance()  {
    }
  PIC32EmergencySetting_(const ContainerAllocator& _alloc)
    : ultrasonic_brake_enabled(false)
    , emergency_button_enabled(false)
    , bumper_brake_enabled(false)
    , auto_dock_enabled(false)
    , wheel_release_enabled(false)
    , wheel_brake_enabled(false)
    , ir_enabled(false)
    , sonic_distance(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ultrasonic_brake_enabled_type;
  _ultrasonic_brake_enabled_type ultrasonic_brake_enabled;

   typedef uint8_t _emergency_button_enabled_type;
  _emergency_button_enabled_type emergency_button_enabled;

   typedef uint8_t _bumper_brake_enabled_type;
  _bumper_brake_enabled_type bumper_brake_enabled;

   typedef uint8_t _auto_dock_enabled_type;
  _auto_dock_enabled_type auto_dock_enabled;

   typedef uint8_t _wheel_release_enabled_type;
  _wheel_release_enabled_type wheel_release_enabled;

   typedef uint8_t _wheel_brake_enabled_type;
  _wheel_brake_enabled_type wheel_brake_enabled;

   typedef uint8_t _ir_enabled_type;
  _ir_enabled_type ir_enabled;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _sonic_distance_type;
  _sonic_distance_type sonic_distance;





  typedef boost::shared_ptr< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> const> ConstPtr;

}; // struct PIC32EmergencySetting_

typedef ::BaseNode::PIC32EmergencySetting_<std::allocator<void> > PIC32EmergencySetting;

typedef boost::shared_ptr< ::BaseNode::PIC32EmergencySetting > PIC32EmergencySettingPtr;
typedef boost::shared_ptr< ::BaseNode::PIC32EmergencySetting const> PIC32EmergencySettingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3769897b20780c564a9f24a1698a3c0a";
  }

  static const char* value(const ::BaseNode::PIC32EmergencySetting_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3769897b20780c56ULL;
  static const uint64_t static_value2 = 0x4a9f24a1698a3c0aULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/PIC32EmergencySetting";
  }

  static const char* value(const ::BaseNode::PIC32EmergencySetting_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ultrasonic_brake_enabled\n\
bool emergency_button_enabled\n\
bool bumper_brake_enabled\n\
bool auto_dock_enabled\n\
\n\
bool wheel_release_enabled\n\
bool wheel_brake_enabled\n\
\n\
bool ir_enabled\n\
\n\
\n\
float64[] sonic_distance\n\
";
  }

  static const char* value(const ::BaseNode::PIC32EmergencySetting_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ultrasonic_brake_enabled);
      stream.next(m.emergency_button_enabled);
      stream.next(m.bumper_brake_enabled);
      stream.next(m.auto_dock_enabled);
      stream.next(m.wheel_release_enabled);
      stream.next(m.wheel_brake_enabled);
      stream.next(m.ir_enabled);
      stream.next(m.sonic_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIC32EmergencySetting_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::PIC32EmergencySetting_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::PIC32EmergencySetting_<ContainerAllocator>& v)
  {
    s << indent << "ultrasonic_brake_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic_brake_enabled);
    s << indent << "emergency_button_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_button_enabled);
    s << indent << "bumper_brake_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bumper_brake_enabled);
    s << indent << "auto_dock_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_dock_enabled);
    s << indent << "wheel_release_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_release_enabled);
    s << indent << "wheel_brake_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_brake_enabled);
    s << indent << "ir_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_enabled);
    s << indent << "sonic_distance[]" << std::endl;
    for (size_t i = 0; i < v.sonic_distance.size(); ++i)
    {
      s << indent << "  sonic_distance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sonic_distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_PIC32EMERGENCYSETTING_H
