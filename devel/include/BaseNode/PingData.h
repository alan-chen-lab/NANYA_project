// Generated by gencpp from file BaseNode/PingData.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_PINGDATA_H
#define BASENODE_MESSAGE_PINGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct PingData_
{
  typedef PingData_<ContainerAllocator> Type;

  PingData_()
    : pingSN()
    , firmwareVer()
    , deviceID()
    , day_(0)
    , hour_(0)
    , min_(0)  {
    }
  PingData_(const ContainerAllocator& _alloc)
    : pingSN(_alloc)
    , firmwareVer(_alloc)
    , deviceID(_alloc)
    , day_(0)
    , hour_(0)
    , min_(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pingSN_type;
  _pingSN_type pingSN;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _firmwareVer_type;
  _firmwareVer_type firmwareVer;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _deviceID_type;
  _deviceID_type deviceID;

   typedef int32_t _day__type;
  _day__type day_;

   typedef int32_t _hour__type;
  _hour__type hour_;

   typedef int32_t _min__type;
  _min__type min_;





  typedef boost::shared_ptr< ::BaseNode::PingData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::PingData_<ContainerAllocator> const> ConstPtr;

}; // struct PingData_

typedef ::BaseNode::PingData_<std::allocator<void> > PingData;

typedef boost::shared_ptr< ::BaseNode::PingData > PingDataPtr;
typedef boost::shared_ptr< ::BaseNode::PingData const> PingDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::PingData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::PingData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::PingData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::PingData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::PingData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::PingData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::PingData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::PingData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::PingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9701021a69e4fdf80bdc15797b522e6";
  }

  static const char* value(const ::BaseNode::PingData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9701021a69e4fdfULL;
  static const uint64_t static_value2 = 0x80bdc15797b522e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::PingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/PingData";
  }

  static const char* value(const ::BaseNode::PingData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::PingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string pingSN\n\
string firmwareVer\n\
string deviceID\n\
int32 day_\n\
int32 hour_\n\
int32 min_\n\
";
  }

  static const char* value(const ::BaseNode::PingData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::PingData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pingSN);
      stream.next(m.firmwareVer);
      stream.next(m.deviceID);
      stream.next(m.day_);
      stream.next(m.hour_);
      stream.next(m.min_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PingData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::PingData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::PingData_<ContainerAllocator>& v)
  {
    s << indent << "pingSN: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pingSN);
    s << indent << "firmwareVer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.firmwareVer);
    s << indent << "deviceID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.deviceID);
    s << indent << "day_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.day_);
    s << indent << "hour_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hour_);
    s << indent << "min_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_PINGDATA_H
