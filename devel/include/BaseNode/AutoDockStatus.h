// Generated by gencpp from file BaseNode/AutoDockStatus.msg
// DO NOT EDIT!


#ifndef BASENODE_MESSAGE_AUTODOCKSTATUS_H
#define BASENODE_MESSAGE_AUTODOCKSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BaseNode
{
template <class ContainerAllocator>
struct AutoDockStatus_
{
  typedef AutoDockStatus_<ContainerAllocator> Type;

  AutoDockStatus_()
    : charge_status(0)
    , charge_stat_1(0)
    , charge_stat_2(0)
    , charge_dock_up(0)
    , dock_error_message(0)  {
    }
  AutoDockStatus_(const ContainerAllocator& _alloc)
    : charge_status(0)
    , charge_stat_1(0)
    , charge_stat_2(0)
    , charge_dock_up(0)
    , dock_error_message(0)  {
  (void)_alloc;
    }



   typedef int32_t _charge_status_type;
  _charge_status_type charge_status;

   typedef int32_t _charge_stat_1_type;
  _charge_stat_1_type charge_stat_1;

   typedef int32_t _charge_stat_2_type;
  _charge_stat_2_type charge_stat_2;

   typedef int32_t _charge_dock_up_type;
  _charge_dock_up_type charge_dock_up;

   typedef int32_t _dock_error_message_type;
  _dock_error_message_type dock_error_message;





  typedef boost::shared_ptr< ::BaseNode::AutoDockStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BaseNode::AutoDockStatus_<ContainerAllocator> const> ConstPtr;

}; // struct AutoDockStatus_

typedef ::BaseNode::AutoDockStatus_<std::allocator<void> > AutoDockStatus;

typedef boost::shared_ptr< ::BaseNode::AutoDockStatus > AutoDockStatusPtr;
typedef boost::shared_ptr< ::BaseNode::AutoDockStatus const> AutoDockStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BaseNode::AutoDockStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BaseNode::AutoDockStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace BaseNode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'BaseNode': ['/home/c01/naya_navigation/src/BaseNode/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BaseNode::AutoDockStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BaseNode::AutoDockStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BaseNode::AutoDockStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9901a3dd8e5c795bffd793bfc0e7fda6";
  }

  static const char* value(const ::BaseNode::AutoDockStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9901a3dd8e5c795bULL;
  static const uint64_t static_value2 = 0xffd793bfc0e7fda6ULL;
};

template<class ContainerAllocator>
struct DataType< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaseNode/AutoDockStatus";
  }

  static const char* value(const ::BaseNode::AutoDockStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 charge_status\n\
int32 charge_stat_1\n\
int32 charge_stat_2\n\
int32 charge_dock_up\n\
int32 dock_error_message\n\
";
  }

  static const char* value(const ::BaseNode::AutoDockStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charge_status);
      stream.next(m.charge_stat_1);
      stream.next(m.charge_stat_2);
      stream.next(m.charge_dock_up);
      stream.next(m.dock_error_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoDockStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BaseNode::AutoDockStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BaseNode::AutoDockStatus_<ContainerAllocator>& v)
  {
    s << indent << "charge_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charge_status);
    s << indent << "charge_stat_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charge_stat_1);
    s << indent << "charge_stat_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charge_stat_2);
    s << indent << "charge_dock_up: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charge_dock_up);
    s << indent << "dock_error_message: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dock_error_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASENODE_MESSAGE_AUTODOCKSTATUS_H
