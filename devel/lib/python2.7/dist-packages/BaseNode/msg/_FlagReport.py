# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/FlagReport.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FlagReport(genpy.Message):
  _md5sum = "d345398ab2289d85ecccc71f9593ce9e"
  _type = "BaseNode/FlagReport"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Move Direction
bool stop
bool walking_front
bool walking_back
bool rotating_left
bool rotating_right

# Robot Mode Flag
bool wheel_control_mode_1
bool wheel_control_mode_2
bool wheel_control_mode_3
bool wheel_brake_mode
bool wheel_release_mode
bool go_to_dock
bool dock_escape

# charge
bool do_not_charge
bool charging
bool charge_finish
bool fault_in_charge

# Button
bool stop_btn_hit
bool sleep_btn_hit




"""
  __slots__ = ['stop','walking_front','walking_back','rotating_left','rotating_right','wheel_control_mode_1','wheel_control_mode_2','wheel_control_mode_3','wheel_brake_mode','wheel_release_mode','go_to_dock','dock_escape','do_not_charge','charging','charge_finish','fault_in_charge','stop_btn_hit','sleep_btn_hit']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stop,walking_front,walking_back,rotating_left,rotating_right,wheel_control_mode_1,wheel_control_mode_2,wheel_control_mode_3,wheel_brake_mode,wheel_release_mode,go_to_dock,dock_escape,do_not_charge,charging,charge_finish,fault_in_charge,stop_btn_hit,sleep_btn_hit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlagReport, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stop is None:
        self.stop = False
      if self.walking_front is None:
        self.walking_front = False
      if self.walking_back is None:
        self.walking_back = False
      if self.rotating_left is None:
        self.rotating_left = False
      if self.rotating_right is None:
        self.rotating_right = False
      if self.wheel_control_mode_1 is None:
        self.wheel_control_mode_1 = False
      if self.wheel_control_mode_2 is None:
        self.wheel_control_mode_2 = False
      if self.wheel_control_mode_3 is None:
        self.wheel_control_mode_3 = False
      if self.wheel_brake_mode is None:
        self.wheel_brake_mode = False
      if self.wheel_release_mode is None:
        self.wheel_release_mode = False
      if self.go_to_dock is None:
        self.go_to_dock = False
      if self.dock_escape is None:
        self.dock_escape = False
      if self.do_not_charge is None:
        self.do_not_charge = False
      if self.charging is None:
        self.charging = False
      if self.charge_finish is None:
        self.charge_finish = False
      if self.fault_in_charge is None:
        self.fault_in_charge = False
      if self.stop_btn_hit is None:
        self.stop_btn_hit = False
      if self.sleep_btn_hit is None:
        self.sleep_btn_hit = False
    else:
      self.stop = False
      self.walking_front = False
      self.walking_back = False
      self.rotating_left = False
      self.rotating_right = False
      self.wheel_control_mode_1 = False
      self.wheel_control_mode_2 = False
      self.wheel_control_mode_3 = False
      self.wheel_brake_mode = False
      self.wheel_release_mode = False
      self.go_to_dock = False
      self.dock_escape = False
      self.do_not_charge = False
      self.charging = False
      self.charge_finish = False
      self.fault_in_charge = False
      self.stop_btn_hit = False
      self.sleep_btn_hit = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18B().pack(_x.stop, _x.walking_front, _x.walking_back, _x.rotating_left, _x.rotating_right, _x.wheel_control_mode_1, _x.wheel_control_mode_2, _x.wheel_control_mode_3, _x.wheel_brake_mode, _x.wheel_release_mode, _x.go_to_dock, _x.dock_escape, _x.do_not_charge, _x.charging, _x.charge_finish, _x.fault_in_charge, _x.stop_btn_hit, _x.sleep_btn_hit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.stop, _x.walking_front, _x.walking_back, _x.rotating_left, _x.rotating_right, _x.wheel_control_mode_1, _x.wheel_control_mode_2, _x.wheel_control_mode_3, _x.wheel_brake_mode, _x.wheel_release_mode, _x.go_to_dock, _x.dock_escape, _x.do_not_charge, _x.charging, _x.charge_finish, _x.fault_in_charge, _x.stop_btn_hit, _x.sleep_btn_hit,) = _get_struct_18B().unpack(str[start:end])
      self.stop = bool(self.stop)
      self.walking_front = bool(self.walking_front)
      self.walking_back = bool(self.walking_back)
      self.rotating_left = bool(self.rotating_left)
      self.rotating_right = bool(self.rotating_right)
      self.wheel_control_mode_1 = bool(self.wheel_control_mode_1)
      self.wheel_control_mode_2 = bool(self.wheel_control_mode_2)
      self.wheel_control_mode_3 = bool(self.wheel_control_mode_3)
      self.wheel_brake_mode = bool(self.wheel_brake_mode)
      self.wheel_release_mode = bool(self.wheel_release_mode)
      self.go_to_dock = bool(self.go_to_dock)
      self.dock_escape = bool(self.dock_escape)
      self.do_not_charge = bool(self.do_not_charge)
      self.charging = bool(self.charging)
      self.charge_finish = bool(self.charge_finish)
      self.fault_in_charge = bool(self.fault_in_charge)
      self.stop_btn_hit = bool(self.stop_btn_hit)
      self.sleep_btn_hit = bool(self.sleep_btn_hit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18B().pack(_x.stop, _x.walking_front, _x.walking_back, _x.rotating_left, _x.rotating_right, _x.wheel_control_mode_1, _x.wheel_control_mode_2, _x.wheel_control_mode_3, _x.wheel_brake_mode, _x.wheel_release_mode, _x.go_to_dock, _x.dock_escape, _x.do_not_charge, _x.charging, _x.charge_finish, _x.fault_in_charge, _x.stop_btn_hit, _x.sleep_btn_hit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.stop, _x.walking_front, _x.walking_back, _x.rotating_left, _x.rotating_right, _x.wheel_control_mode_1, _x.wheel_control_mode_2, _x.wheel_control_mode_3, _x.wheel_brake_mode, _x.wheel_release_mode, _x.go_to_dock, _x.dock_escape, _x.do_not_charge, _x.charging, _x.charge_finish, _x.fault_in_charge, _x.stop_btn_hit, _x.sleep_btn_hit,) = _get_struct_18B().unpack(str[start:end])
      self.stop = bool(self.stop)
      self.walking_front = bool(self.walking_front)
      self.walking_back = bool(self.walking_back)
      self.rotating_left = bool(self.rotating_left)
      self.rotating_right = bool(self.rotating_right)
      self.wheel_control_mode_1 = bool(self.wheel_control_mode_1)
      self.wheel_control_mode_2 = bool(self.wheel_control_mode_2)
      self.wheel_control_mode_3 = bool(self.wheel_control_mode_3)
      self.wheel_brake_mode = bool(self.wheel_brake_mode)
      self.wheel_release_mode = bool(self.wheel_release_mode)
      self.go_to_dock = bool(self.go_to_dock)
      self.dock_escape = bool(self.dock_escape)
      self.do_not_charge = bool(self.do_not_charge)
      self.charging = bool(self.charging)
      self.charge_finish = bool(self.charge_finish)
      self.fault_in_charge = bool(self.fault_in_charge)
      self.stop_btn_hit = bool(self.stop_btn_hit)
      self.sleep_btn_hit = bool(self.sleep_btn_hit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18B = None
def _get_struct_18B():
    global _struct_18B
    if _struct_18B is None:
        _struct_18B = struct.Struct("<18B")
    return _struct_18B
