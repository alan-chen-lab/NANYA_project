# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/PIC32EmergencySetting.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PIC32EmergencySetting(genpy.Message):
  _md5sum = "3769897b20780c564a9f24a1698a3c0a"
  _type = "BaseNode/PIC32EmergencySetting"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool ultrasonic_brake_enabled
bool emergency_button_enabled
bool bumper_brake_enabled
bool auto_dock_enabled

bool wheel_release_enabled
bool wheel_brake_enabled

bool ir_enabled


float64[] sonic_distance
"""
  __slots__ = ['ultrasonic_brake_enabled','emergency_button_enabled','bumper_brake_enabled','auto_dock_enabled','wheel_release_enabled','wheel_brake_enabled','ir_enabled','sonic_distance']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ultrasonic_brake_enabled,emergency_button_enabled,bumper_brake_enabled,auto_dock_enabled,wheel_release_enabled,wheel_brake_enabled,ir_enabled,sonic_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PIC32EmergencySetting, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ultrasonic_brake_enabled is None:
        self.ultrasonic_brake_enabled = False
      if self.emergency_button_enabled is None:
        self.emergency_button_enabled = False
      if self.bumper_brake_enabled is None:
        self.bumper_brake_enabled = False
      if self.auto_dock_enabled is None:
        self.auto_dock_enabled = False
      if self.wheel_release_enabled is None:
        self.wheel_release_enabled = False
      if self.wheel_brake_enabled is None:
        self.wheel_brake_enabled = False
      if self.ir_enabled is None:
        self.ir_enabled = False
      if self.sonic_distance is None:
        self.sonic_distance = []
    else:
      self.ultrasonic_brake_enabled = False
      self.emergency_button_enabled = False
      self.bumper_brake_enabled = False
      self.auto_dock_enabled = False
      self.wheel_release_enabled = False
      self.wheel_brake_enabled = False
      self.ir_enabled = False
      self.sonic_distance = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.ultrasonic_brake_enabled, _x.emergency_button_enabled, _x.bumper_brake_enabled, _x.auto_dock_enabled, _x.wheel_release_enabled, _x.wheel_brake_enabled, _x.ir_enabled))
      length = len(self.sonic_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.sonic_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ultrasonic_brake_enabled, _x.emergency_button_enabled, _x.bumper_brake_enabled, _x.auto_dock_enabled, _x.wheel_release_enabled, _x.wheel_brake_enabled, _x.ir_enabled,) = _get_struct_7B().unpack(str[start:end])
      self.ultrasonic_brake_enabled = bool(self.ultrasonic_brake_enabled)
      self.emergency_button_enabled = bool(self.emergency_button_enabled)
      self.bumper_brake_enabled = bool(self.bumper_brake_enabled)
      self.auto_dock_enabled = bool(self.auto_dock_enabled)
      self.wheel_release_enabled = bool(self.wheel_release_enabled)
      self.wheel_brake_enabled = bool(self.wheel_brake_enabled)
      self.ir_enabled = bool(self.ir_enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.sonic_distance = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.ultrasonic_brake_enabled, _x.emergency_button_enabled, _x.bumper_brake_enabled, _x.auto_dock_enabled, _x.wheel_release_enabled, _x.wheel_brake_enabled, _x.ir_enabled))
      length = len(self.sonic_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.sonic_distance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.ultrasonic_brake_enabled, _x.emergency_button_enabled, _x.bumper_brake_enabled, _x.auto_dock_enabled, _x.wheel_release_enabled, _x.wheel_brake_enabled, _x.ir_enabled,) = _get_struct_7B().unpack(str[start:end])
      self.ultrasonic_brake_enabled = bool(self.ultrasonic_brake_enabled)
      self.emergency_button_enabled = bool(self.emergency_button_enabled)
      self.bumper_brake_enabled = bool(self.bumper_brake_enabled)
      self.auto_dock_enabled = bool(self.auto_dock_enabled)
      self.wheel_release_enabled = bool(self.wheel_release_enabled)
      self.wheel_brake_enabled = bool(self.wheel_brake_enabled)
      self.ir_enabled = bool(self.ir_enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.sonic_distance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
