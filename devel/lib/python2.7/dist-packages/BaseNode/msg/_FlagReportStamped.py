# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/FlagReportStamped.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import BaseNode.msg
import std_msgs.msg

class FlagReportStamped(genpy.Message):
  _md5sum = "51a9914a0bbd2a4083e199a0966ecbf3"
  _type = "BaseNode/FlagReportStamped"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
FlagReport flag_report


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: BaseNode/FlagReport
# Move Direction
bool stop
bool walking_front
bool walking_back
bool rotating_left
bool rotating_right

# Robot Mode Flag
bool wheel_control_mode_1
bool wheel_control_mode_2
bool wheel_control_mode_3
bool wheel_brake_mode
bool wheel_release_mode
bool go_to_dock
bool dock_escape

# charge
bool do_not_charge
bool charging
bool charge_finish
bool fault_in_charge

# Button
bool stop_btn_hit
bool sleep_btn_hit




"""
  __slots__ = ['header','flag_report']
  _slot_types = ['std_msgs/Header','BaseNode/FlagReport']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,flag_report

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlagReportStamped, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.flag_report is None:
        self.flag_report = BaseNode.msg.FlagReport()
    else:
      self.header = std_msgs.msg.Header()
      self.flag_report = BaseNode.msg.FlagReport()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_18B().pack(_x.flag_report.stop, _x.flag_report.walking_front, _x.flag_report.walking_back, _x.flag_report.rotating_left, _x.flag_report.rotating_right, _x.flag_report.wheel_control_mode_1, _x.flag_report.wheel_control_mode_2, _x.flag_report.wheel_control_mode_3, _x.flag_report.wheel_brake_mode, _x.flag_report.wheel_release_mode, _x.flag_report.go_to_dock, _x.flag_report.dock_escape, _x.flag_report.do_not_charge, _x.flag_report.charging, _x.flag_report.charge_finish, _x.flag_report.fault_in_charge, _x.flag_report.stop_btn_hit, _x.flag_report.sleep_btn_hit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.flag_report is None:
        self.flag_report = BaseNode.msg.FlagReport()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.flag_report.stop, _x.flag_report.walking_front, _x.flag_report.walking_back, _x.flag_report.rotating_left, _x.flag_report.rotating_right, _x.flag_report.wheel_control_mode_1, _x.flag_report.wheel_control_mode_2, _x.flag_report.wheel_control_mode_3, _x.flag_report.wheel_brake_mode, _x.flag_report.wheel_release_mode, _x.flag_report.go_to_dock, _x.flag_report.dock_escape, _x.flag_report.do_not_charge, _x.flag_report.charging, _x.flag_report.charge_finish, _x.flag_report.fault_in_charge, _x.flag_report.stop_btn_hit, _x.flag_report.sleep_btn_hit,) = _get_struct_18B().unpack(str[start:end])
      self.flag_report.stop = bool(self.flag_report.stop)
      self.flag_report.walking_front = bool(self.flag_report.walking_front)
      self.flag_report.walking_back = bool(self.flag_report.walking_back)
      self.flag_report.rotating_left = bool(self.flag_report.rotating_left)
      self.flag_report.rotating_right = bool(self.flag_report.rotating_right)
      self.flag_report.wheel_control_mode_1 = bool(self.flag_report.wheel_control_mode_1)
      self.flag_report.wheel_control_mode_2 = bool(self.flag_report.wheel_control_mode_2)
      self.flag_report.wheel_control_mode_3 = bool(self.flag_report.wheel_control_mode_3)
      self.flag_report.wheel_brake_mode = bool(self.flag_report.wheel_brake_mode)
      self.flag_report.wheel_release_mode = bool(self.flag_report.wheel_release_mode)
      self.flag_report.go_to_dock = bool(self.flag_report.go_to_dock)
      self.flag_report.dock_escape = bool(self.flag_report.dock_escape)
      self.flag_report.do_not_charge = bool(self.flag_report.do_not_charge)
      self.flag_report.charging = bool(self.flag_report.charging)
      self.flag_report.charge_finish = bool(self.flag_report.charge_finish)
      self.flag_report.fault_in_charge = bool(self.flag_report.fault_in_charge)
      self.flag_report.stop_btn_hit = bool(self.flag_report.stop_btn_hit)
      self.flag_report.sleep_btn_hit = bool(self.flag_report.sleep_btn_hit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_18B().pack(_x.flag_report.stop, _x.flag_report.walking_front, _x.flag_report.walking_back, _x.flag_report.rotating_left, _x.flag_report.rotating_right, _x.flag_report.wheel_control_mode_1, _x.flag_report.wheel_control_mode_2, _x.flag_report.wheel_control_mode_3, _x.flag_report.wheel_brake_mode, _x.flag_report.wheel_release_mode, _x.flag_report.go_to_dock, _x.flag_report.dock_escape, _x.flag_report.do_not_charge, _x.flag_report.charging, _x.flag_report.charge_finish, _x.flag_report.fault_in_charge, _x.flag_report.stop_btn_hit, _x.flag_report.sleep_btn_hit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.flag_report is None:
        self.flag_report = BaseNode.msg.FlagReport()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.flag_report.stop, _x.flag_report.walking_front, _x.flag_report.walking_back, _x.flag_report.rotating_left, _x.flag_report.rotating_right, _x.flag_report.wheel_control_mode_1, _x.flag_report.wheel_control_mode_2, _x.flag_report.wheel_control_mode_3, _x.flag_report.wheel_brake_mode, _x.flag_report.wheel_release_mode, _x.flag_report.go_to_dock, _x.flag_report.dock_escape, _x.flag_report.do_not_charge, _x.flag_report.charging, _x.flag_report.charge_finish, _x.flag_report.fault_in_charge, _x.flag_report.stop_btn_hit, _x.flag_report.sleep_btn_hit,) = _get_struct_18B().unpack(str[start:end])
      self.flag_report.stop = bool(self.flag_report.stop)
      self.flag_report.walking_front = bool(self.flag_report.walking_front)
      self.flag_report.walking_back = bool(self.flag_report.walking_back)
      self.flag_report.rotating_left = bool(self.flag_report.rotating_left)
      self.flag_report.rotating_right = bool(self.flag_report.rotating_right)
      self.flag_report.wheel_control_mode_1 = bool(self.flag_report.wheel_control_mode_1)
      self.flag_report.wheel_control_mode_2 = bool(self.flag_report.wheel_control_mode_2)
      self.flag_report.wheel_control_mode_3 = bool(self.flag_report.wheel_control_mode_3)
      self.flag_report.wheel_brake_mode = bool(self.flag_report.wheel_brake_mode)
      self.flag_report.wheel_release_mode = bool(self.flag_report.wheel_release_mode)
      self.flag_report.go_to_dock = bool(self.flag_report.go_to_dock)
      self.flag_report.dock_escape = bool(self.flag_report.dock_escape)
      self.flag_report.do_not_charge = bool(self.flag_report.do_not_charge)
      self.flag_report.charging = bool(self.flag_report.charging)
      self.flag_report.charge_finish = bool(self.flag_report.charge_finish)
      self.flag_report.fault_in_charge = bool(self.flag_report.fault_in_charge)
      self.flag_report.stop_btn_hit = bool(self.flag_report.stop_btn_hit)
      self.flag_report.sleep_btn_hit = bool(self.flag_report.sleep_btn_hit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18B = None
def _get_struct_18B():
    global _struct_18B
    if _struct_18B is None:
        _struct_18B = struct.Struct("<18B")
    return _struct_18B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
