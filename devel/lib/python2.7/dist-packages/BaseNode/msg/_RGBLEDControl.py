# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/RGBLEDControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RGBLEDControl(genpy.Message):
  _md5sum = "4096ab5b30b2048afde4d3c5779fe493"
  _type = "BaseNode/RGBLEDControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 start_red
uint8 start_green
uint8 start_blue
uint8 end_red
uint8 end_green
uint8 end_blue
float32 transform_time 
float32 run_time
"""
  __slots__ = ['start_red','start_green','start_blue','end_red','end_green','end_blue','transform_time','run_time']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_red,start_green,start_blue,end_red,end_green,end_blue,transform_time,run_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RGBLEDControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_red is None:
        self.start_red = 0
      if self.start_green is None:
        self.start_green = 0
      if self.start_blue is None:
        self.start_blue = 0
      if self.end_red is None:
        self.end_red = 0
      if self.end_green is None:
        self.end_green = 0
      if self.end_blue is None:
        self.end_blue = 0
      if self.transform_time is None:
        self.transform_time = 0.
      if self.run_time is None:
        self.run_time = 0.
    else:
      self.start_red = 0
      self.start_green = 0
      self.start_blue = 0
      self.end_red = 0
      self.end_green = 0
      self.end_blue = 0
      self.transform_time = 0.
      self.run_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B2f().pack(_x.start_red, _x.start_green, _x.start_blue, _x.end_red, _x.end_green, _x.end_blue, _x.transform_time, _x.run_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.start_red, _x.start_green, _x.start_blue, _x.end_red, _x.end_green, _x.end_blue, _x.transform_time, _x.run_time,) = _get_struct_6B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B2f().pack(_x.start_red, _x.start_green, _x.start_blue, _x.end_red, _x.end_green, _x.end_blue, _x.transform_time, _x.run_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.start_red, _x.start_green, _x.start_blue, _x.end_red, _x.end_green, _x.end_blue, _x.transform_time, _x.run_time,) = _get_struct_6B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B2f = None
def _get_struct_6B2f():
    global _struct_6B2f
    if _struct_6B2f is None:
        _struct_6B2f = struct.Struct("<6B2f")
    return _struct_6B2f
