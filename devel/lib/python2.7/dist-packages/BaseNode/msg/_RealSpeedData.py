# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/RealSpeedData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RealSpeedData(genpy.Message):
  _md5sum = "af4042522846a38590d01848f45d1cda"
  _type = "BaseNode/RealSpeedData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 left_control_value
float32 left_error_value
float32 left_reference_speed_value
float32 left_real_speed_value
float32 left_output_PWM_value
float32 left_brake_value
float32 right_control_value
float32 right_error_value
float32 right_reference_speed_value
float32 right_real_speed_value
float32 right_output_PWM_value
float32 right_brake_value"""
  __slots__ = ['left_control_value','left_error_value','left_reference_speed_value','left_real_speed_value','left_output_PWM_value','left_brake_value','right_control_value','right_error_value','right_reference_speed_value','right_real_speed_value','right_output_PWM_value','right_brake_value']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_control_value,left_error_value,left_reference_speed_value,left_real_speed_value,left_output_PWM_value,left_brake_value,right_control_value,right_error_value,right_reference_speed_value,right_real_speed_value,right_output_PWM_value,right_brake_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RealSpeedData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_control_value is None:
        self.left_control_value = 0.
      if self.left_error_value is None:
        self.left_error_value = 0.
      if self.left_reference_speed_value is None:
        self.left_reference_speed_value = 0.
      if self.left_real_speed_value is None:
        self.left_real_speed_value = 0.
      if self.left_output_PWM_value is None:
        self.left_output_PWM_value = 0.
      if self.left_brake_value is None:
        self.left_brake_value = 0.
      if self.right_control_value is None:
        self.right_control_value = 0.
      if self.right_error_value is None:
        self.right_error_value = 0.
      if self.right_reference_speed_value is None:
        self.right_reference_speed_value = 0.
      if self.right_real_speed_value is None:
        self.right_real_speed_value = 0.
      if self.right_output_PWM_value is None:
        self.right_output_PWM_value = 0.
      if self.right_brake_value is None:
        self.right_brake_value = 0.
    else:
      self.left_control_value = 0.
      self.left_error_value = 0.
      self.left_reference_speed_value = 0.
      self.left_real_speed_value = 0.
      self.left_output_PWM_value = 0.
      self.left_brake_value = 0.
      self.right_control_value = 0.
      self.right_error_value = 0.
      self.right_reference_speed_value = 0.
      self.right_real_speed_value = 0.
      self.right_output_PWM_value = 0.
      self.right_brake_value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.left_control_value, _x.left_error_value, _x.left_reference_speed_value, _x.left_real_speed_value, _x.left_output_PWM_value, _x.left_brake_value, _x.right_control_value, _x.right_error_value, _x.right_reference_speed_value, _x.right_real_speed_value, _x.right_output_PWM_value, _x.right_brake_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.left_control_value, _x.left_error_value, _x.left_reference_speed_value, _x.left_real_speed_value, _x.left_output_PWM_value, _x.left_brake_value, _x.right_control_value, _x.right_error_value, _x.right_reference_speed_value, _x.right_real_speed_value, _x.right_output_PWM_value, _x.right_brake_value,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.left_control_value, _x.left_error_value, _x.left_reference_speed_value, _x.left_real_speed_value, _x.left_output_PWM_value, _x.left_brake_value, _x.right_control_value, _x.right_error_value, _x.right_reference_speed_value, _x.right_real_speed_value, _x.right_output_PWM_value, _x.right_brake_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.left_control_value, _x.left_error_value, _x.left_reference_speed_value, _x.left_real_speed_value, _x.left_output_PWM_value, _x.left_brake_value, _x.right_control_value, _x.right_error_value, _x.right_reference_speed_value, _x.right_real_speed_value, _x.right_output_PWM_value, _x.right_brake_value,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
