# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/GetObstacleDistanceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetObstacleDistanceRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "BaseNode/GetObstacleDistanceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetObstacleDistanceRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from BaseNode/GetObstacleDistanceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetObstacleDistanceResponse(genpy.Message):
  _md5sum = "01f181dd22773f5f5fa03ae27cc740e5"
  _type = "BaseNode/GetObstacleDistanceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 USDis0
uint8 USDis1
uint8 USDis2
uint8 USDis3
uint8 USDis4
uint8 USDis5
uint8 USDis6
"""
  __slots__ = ['USDis0','USDis1','USDis2','USDis3','USDis4','USDis5','USDis6']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       USDis0,USDis1,USDis2,USDis3,USDis4,USDis5,USDis6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetObstacleDistanceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.USDis0 is None:
        self.USDis0 = 0
      if self.USDis1 is None:
        self.USDis1 = 0
      if self.USDis2 is None:
        self.USDis2 = 0
      if self.USDis3 is None:
        self.USDis3 = 0
      if self.USDis4 is None:
        self.USDis4 = 0
      if self.USDis5 is None:
        self.USDis5 = 0
      if self.USDis6 is None:
        self.USDis6 = 0
    else:
      self.USDis0 = 0
      self.USDis1 = 0
      self.USDis2 = 0
      self.USDis3 = 0
      self.USDis4 = 0
      self.USDis5 = 0
      self.USDis6 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.USDis0, _x.USDis1, _x.USDis2, _x.USDis3, _x.USDis4, _x.USDis5, _x.USDis6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.USDis0, _x.USDis1, _x.USDis2, _x.USDis3, _x.USDis4, _x.USDis5, _x.USDis6,) = _get_struct_7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.USDis0, _x.USDis1, _x.USDis2, _x.USDis3, _x.USDis4, _x.USDis5, _x.USDis6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.USDis0, _x.USDis1, _x.USDis2, _x.USDis3, _x.USDis4, _x.USDis5, _x.USDis6,) = _get_struct_7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
class GetObstacleDistance(object):
  _type          = 'BaseNode/GetObstacleDistance'
  _md5sum = '01f181dd22773f5f5fa03ae27cc740e5'
  _request_class  = GetObstacleDistanceRequest
  _response_class = GetObstacleDistanceResponse
